// Code generated by github.com/vedranvuk/cmdline DO NOT EDIT.

package {{.PackageName}}

import (
	"os"
	{{range $path, $name := .ImportMap}}
	{{if eq $name ""}}"{{print $path}}"{{else}}{{print $name}} "{{print $path}}"{{end}}{{end}}
)

var ({{range .Commands}}
	{{.Name}}Var = new({{.Signature}}){{end}}
)

var ({{range $command := .Commands}}
	{{$command.Name}}Cmd = &cmdline.Command{
		Name: "{{.Name}}",
		Help: "{{.Help}}",
		Options: []cmdline.Option{ {{range $command.Options}}
			&{{.Signature}}{
				LongName: "{{.LongName}}",
				ShortName: "{{.ShortName}}",
				Help: "{{.Help}}",
				MappedValue: &{{$command.Name}}Var.{{.FieldPath}},
			},{{end}}
		},
		Handler: handle{{.SourceStructType}},
	}{{end}}
)

// parseCmdLine parses the command line into defined commands.
func cmdlineConfig() *cmdline.Config {

	var config = &cmdline.Config{
		Arguments: os.Args[1:],
		Commands: cmdline.Commands{ {{range .Commands}}
			{{.Name}}Cmd,{{end}}
		},
	}

	config.Commands.Register(			
		&cmdline.Command{
			Name: "help",
			Help: "Shows help.",
			Handler: cmdline.HelpHandler,

		},
	)

	return config
}

{{range .Commands}}
// handle{{.SourceStructType}} is a handler for the {{.Name}}Cmd.
func handle{{.SourceStructType}}(c cmdline.Context) error {
	return nil
}{{end}}


