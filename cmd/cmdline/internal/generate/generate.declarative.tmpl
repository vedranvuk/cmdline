// Code generated by github.com/vedranvuk/cmdline DO NOT EDIT.

package {{.PackageName}}

import (
	"os"
	{{range $path, $name := .ImportMap}}
	{{if eq $name ""}}"{{print $path}}"{{else}}{{print $name}} "{{print $path}}"{{end}}{{end}}
)

{{if .AnyTargets}}var ({{range .Commands}}{{if not .GenTarget}}{{ continue }}{{end}}
	{{.TargetName}} = new({{.TargetSelector}}){{end}}
){{end}}

var ({{range $command := .Commands}}
	{{$command.CommandName}} = &cmdline.Command{
		Name: "{{.Name}}",
		Help: "{{.Help}}",
		Options: cmdline.Options{ {{range $option := $command.Options}}
			&cmdline.Option{
				LongName: "{{$option.LongName}}",
				ShortName: "{{$option.ShortName}}",
				Help: "{{$option.Help}}",
				Var: &{{$command.TargetName}}.{{$option.SourceFieldPath}},
				Kind: cmdline.{{$option.Kind.String}},
			},{{end}}
		},
		Handler: {{$command.HandlerName}},
	}{{end}}
)

// parseCmdLine parses the command line into defined commands.
func cmdlineConfig() *cmdline.Config {

	var config = &cmdline.Config{
		Args: os.Args[1:],
		Commands: cmdline.Commands{ {{range .Commands}}
			{{.CommandName}},{{end}}
			cmdline.HelpCommand(),
		},
	}

	return config
}

{{range .Commands}}{{if not .GenHandler}}{{continue}}{{end}}
// {{.HandlerName}} is a handler for the {{.CommandName}}.
func {{.HandlerName}}(c cmdline.Context) error {
	return nil
}{{end}}


