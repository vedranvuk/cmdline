// Code generated by github.com/vedranvuk/cmdline DO NOT EDIT.

package {{.PackageName}}

import (
	{{range $path, $name := .ImportMap}}
	{{if eq $name ""}}"{{print $path}}"{{else}}{{print $name}} "{{print $path}}"{{end}}{{end}}
)

{{if .AnyStructVars}}var ({{range .Commands}}{{if .NoDeclareVar}}{{ continue }}{{end}}
	{{.GetStructVarName}} = new({{.StructSelector}}){{end}}
){{end}}

var ({{range $command := .Commands}}
	{{$command.GetCommandName}} = &cmdline.Command{
		Name: "{{.Name}}",
		Help: "{{.Help}}",
		Options: cmdline.Options{ {{range $option := $command.Options}}
			&cmdline.Option{
				LongName: "{{$option.LongName}}",
				ShortName: "{{$option.ShortName}}",
				Help: "{{$option.Help}}",
				Var: &{{$command.GetStructVarName}}.{{$option.FieldPath}},
				Kind: cmdline.{{$option.Kind.String}},
			},{{end}}
		},
		Handler: {{$command.GetHandlerName}},
	}{{end}}
)

// parseCmdLine parses the command line into defined commands.
func cmdlineConfig() (config *cmdline.Config) {
	config = cmdline.DefaultOS(){{range $command := .Commands}}
	config.Commands.Handle(
		{{$command.Name}},
		{{$command.Help}},
		{{$command.GetHandlerName}},
	){{if gt $command.Options.Count 0}}.Options.{{end}}{{range $option := $command.Options}}
		{{$option.Kind.String}}Var({{$option}}){{end}}
	{{end}}
	config.Commands.Register(cmdline.HelpCommand())
	return config
}

{{range .Commands}}{{if not .GenerateHandler}}{{continue}}{{end}}
// {{.GetHandlerName}} is a handler for the {{.GetCommandName}}.
func {{.GetHandlerName}}(c cmdline.Context) error {
	return nil
}{{end}}


